const {
  GoogleGenerativeAI,
  HarmCategory,
  HarmBlockThreshold,
} = require("@google/generative-ai");

const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
const genAI = new GoogleGenerativeAI(apiKey);

const model = genAI.getGenerativeModel({
  model: "gemini-2.0-flash",
});

const generationConfig = {
  temperature: 1,
  topP: 0.95,
  topK: 40,
  maxOutputTokens: 8192,
  responseMimeType: "text/plain",
};

export const chatSession = model.startChat({
  generationConfig,
  history: [],
});

const CodeGenerationConfig = {
  temperature: 1,
  topP: 0.95,
  topK: 40,
  maxOutputTokens: 8192,
  responseMimeType: "application/json",
};

export const GenAiCode = model.startChat({
  generationConfig: CodeGenerationConfig,
  history: [
    {
      role: "user",
      parts: [
        {
          text: 'Generate a Budget Tracking app : Generate a Project in React. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use Tailwind CSS for styling, \nwithout any third-party dependencies or libraries, except for icons from the lucide-react library, which should only be used when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from "lucide-react" and use it in JSX as <Heart className="" />.\nalso you can use date-fns for date format and react-chartjs-2 chart, graph library\n\nReturn the response in JSON format with the following schema:\n{\n  "projectTitle": "",\n  "explanation": "",\n  "files": {\n    "/App.js": {\n      "code": ""\n    },\n    ...\n  },\n  "generatedFiles": []\n}\n\nHereâ€™s the reformatted and improved version of your prompt:\n\nGenerate a programming code structure for a React project using Vite. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use Tailwind CSS for styling, without any third-party dependencies or libraries, except for icons from the lucide-react library, which should only be used when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from "lucide-react" and use it in JSX as <Heart className="" />.\n\nReturn the response in JSON format with the following schema:\n\njson\nCopy code\n{\n  "projectTitle": "",\n  "explanation": "",\n  "files": {\n    "/App.js": {\n      "code": ""\n    },\n    ...\n  },\n  "generatedFiles": []\n}\nEnsure the files field contains all created files, and the generatedFiles field lists all the filenames. Each file\'s code should be included in the code field, following this example:\nfiles:{\n  "/App.js": {\n    "code": "import React from \'react\';\\nimport \'./styles.css\';\\nexport default function App() {\\n  return (\\n    <div className=\'p-4 bg-gray-100 text-center\'>\\n      <h1 className=\'text-2xl font-bold text-blue-500\'>Hello, Tailwind CSS with Sandpack!</h1>\\n      <p className=\'mt-2 text-gray-700\'>This is a live code editor.</p>\\n    </div>\\n  );\\n}"\n  }\n}\n  Additionally, include an explanation of the project\'s structure, purpose, and functionality in the explanation field. Make the response concise and clear in one paragraph.\n  - When asked then only use this package to import, here are some packages available to import and use (date-fns,react-chartjs-2,"firebase","@google/generative-ai" ) only when it required\n  \n  - For placeholder images, please use a https://archive.org/download/placeholder-image/placeholder-image.jpg\n  -Add Emoji icons whenever needed to give good user experinence\n  - all designs I ask you to make, have them be beautiful, not cookie cutter. Make webpages that are fully featured and worthy for production.\n\n- By default, this template supports JSX syntax with Tailwind CSS classes, React hooks, and Lucide React for icons. Do not install other packages for UI themes, icons, etc unless absolutely necessary or I request them.\n\n- Use icons from lucide-react for logos.\n\n- Use stock photos from unsplash where appropriate, only valid URLs you know exist. Do not download the images, only link to them in image tags.\n',
        },
      ],
    },
    {
      role: "model",
      parts: [
        {
          text: '```json\n{\n  "projectTitle": "Budget Tracking App",\n  "explanation": "This React project implements a budget tracking application using Tailwind CSS for styling and lucide-react for icons. The app is structured into multiple components, including a dashboard, transaction list, and form for adding new transactions. It allows users to track their income and expenses, providing a clear overview of their financial situation. The application uses date-fns for formatting dates and react-chartjs-2 for visualising the data. I have been instructed to only use packages when absolutely necessary, and only the following are available to import and use: (date-fns,react-chartjs-2,\\"firebase\\",\\"@google/generative-ai\\"). Stock images from valid URLs can be used.",\n  "files": {\n    "/App.js": {\n      "code": "import React, { useState, useEffect } from \'react\';\\nimport Dashboard from \'./components/Dashboard/Dashboard\';\\nimport TransactionList from \'./components/TransactionList/TransactionList\';\\nimport AddTransaction from \'./components/AddTransaction/AddTransaction\';\\n\\nconst App = () => {\\n  const [transactions, setTransactions] = useState(() => {\\n    const storedTransactions = localStorage.getItem(\'transactions\');\\n    return storedTransactions ? JSON.parse(storedTransactions) : [];\\n  });\\n\\n  useEffect(() => {\\n    localStorage.setItem(\'transactions\', JSON.stringify(transactions));\\n  }, [transactions]);\\n\\n  const addTransaction = (newTransaction) => {\\n    setTransactions([...transactions, newTransaction]);\\n  };\\n\\n  const deleteTransaction = (id) => {\\n    setTransactions(transactions.filter(transaction => transaction.id !== id));\\n  };\\n\\n  return (\\n    <div className=\\"bg-gray-100 min-h-screen\\">\\n      <header className=\\"bg-blue-600 text-white py-4 shadow-md\\">\\n        <div className=\\"container mx-auto px-4\\">\\n          <h1 className=\\"text-2xl font-semibold text-center\\">ðŸ’° Budget Tracking App ðŸ“ˆ</h1>\\n        </div>\\n      </header>\\n      <div className=\\"container mx-auto mt-8\\">\\n        <Dashboard transactions={transactions} />\\n        <div className=\\"grid grid-cols-1 md:grid-cols-2 gap-4\\">\\n          <TransactionList transactions={transactions} onDelete={deleteTransaction} />\\n          <AddTransaction onAdd={addTransaction} />\\n        </div>\\n      </div>\\n    </div>\\n  );\\n};\\n\\nexport default App;"\n    },\n    "/components/Dashboard/Dashboard.js": {\n      "code": "import React from \'react\';\\nimport { format } from \'date-fns\';\\nimport { Bar } from \'react-chartjs-2\';\\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from \'chart.js\';\\n\\nChartJS.register(\\n    CategoryScale,\\n    LinearScale,\\n    BarElement,\\n    Title,\\n    Tooltip,\\n    Legend\\n);\\n\\nconst Dashboard = ({ transactions }) => {\\n  const income = transactions.filter(t => t.amount > 0).reduce((acc, t) => acc + t.amount, 0);\\n  const expense = transactions.filter(t => t.amount < 0).reduce((acc, t) => acc + t.amount, 0);\\n  const balance = income + expense;\\n\\n  // Prepare data for the chart\\n  const transactionData = transactions.map(t => ({\\n    date: format(new Date(t.date), \'MMM dd\'),\\n    amount: t.amount,\\n  }));\\n\\n  // Group transactions by date\\n  const groupedTransactions = transactionData.reduce((acc, t) => {\\n    acc[t.date] = (acc[t.date] || 0) + t.amount;\\n    return acc;\\n  }, {});\\n\\n  const chartData = {\\n    labels: Object.keys(groupedTransactions),\\n    datasets: [\\n      {\\n        label: \'Transaction Amount\',\\n        data: Object.values(groupedTransactions),\\n        backgroundColor: \'rgba(54, 162, 235, 0.6)\',\\n      },\\n    ],\\n  };\\n\\n  const chartOptions = {\\n    responsive: true,\\n    plugins: {\\n      legend: {\\n        position: \'top\',\\n      },\\n      title: {\\n        display: true,\\n        text: \'Transactions Over Time\',\\n      },\\n    },\\n  };\\n\\n  return (\\n    <div className=\\"bg-white rounded-lg shadow-md p-4 mb-4\\">\\n      <h2 className=\\"text-lg font-semibold mb-2\\">ðŸ“Š Dashboard</h2>\\n      <div className=\\"grid grid-cols-1 md:grid-cols-3 gap-4\\">\\n        <div className=\\"p-4 bg-green-100 rounded-lg\\">\\n          <h3 className=\\"text-md font-semibold\\">Income</h3>\\n          <p className=\\"text-green-600\\">+${income.toFixed(2)}</p>\\n        </div>\\n        <div className=\\"p-4 bg-red-100 rounded-lg\\">\\n          <h3 className=\\"text-md font-semibold\\">Expenses</h3>\\n          <p className=\\"text-red-600\\">${expense.toFixed(2)}</p>\\n        </div>\\n        <div className=\\"p-4 bg-gray-100 rounded-lg\\">\\n          <h3 className=\\"text-md font-semibold\\">Balance</h3>\\n          <p className=\\"text-blue-600\\">${balance.toFixed(2)}</p>\\n        </div>\\n      </div>\\n\\n      {/* Chart */}\\n      <div className=\\"mt-6\\">\\n        <Bar data={chartData} options={chartOptions} />\\n      </div>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;"\n    },\n    "/components/TransactionList/TransactionList.js": {\n      "code": "import React from \'react\';\\nimport { format } from \'date-fns\';\\nimport { Trash } from \'lucide-react\';\\n\\nconst TransactionList = ({ transactions, onDelete }) => {\\n  return (\\n    <div className=\\"bg-white rounded-lg shadow-md p-4\\">\\n      <h2 className=\\"text-lg font-semibold mb-2\\">ðŸ“œ Transaction History</h2>\\n      {transactions.length === 0 ? (\\n        <p className=\\"text-gray-500\\">No transactions yet. Add some!</p>\\n      ) : (\\n        <ul className=\\"divide-y divide-gray-200\\">\\n          {transactions.map(transaction => (\\n            <li key={transaction.id} className=\\"py-2 flex items-center justify-between\\">\\n              <div>\\n                <p className=\\"font-medium\\">{transaction.description}</p>\\n                <p className=\\"text-gray-500 text-sm\\">{format(new Date(transaction.date), \'MMM dd, yyyy\')}</p>\\n              </div>\\n              <div className=\\"flex items-center\\">\\n                <p className={`text-md font-semibold ${transaction.amount > 0 ? \'text-green-600\' : \'text-red-600\'}`}>\\n                  ${transaction.amount.toFixed(2)}\\n                </p>\\n                <button onClick={() => onDelete(transaction.id)} className=\\"ml-4 text-red-500 hover:text-red-700\\">\\n                  <Trash className=\\"h-5 w-5\\" />\\n                </button>\\n              </div>\\n            </li>\\n          ))}\\n        </ul>\\n      )}\\n    </div>\\n  );\\n};\\n\\nexport default TransactionList;"\n    },\n    "/components/AddTransaction/AddTransaction.js": {\n      "code": "import React, { useState } from \'react\';\\nimport { Plus } from \'lucide-react\';\\n\\nconst AddTransaction = ({ onAdd }) => {\\n  const [description, setDescription] = useState(\'\');\\n  const [amount, setAmount] = useState(\'\');\\n  const [date, setDate] = useState(\'\');\\n\\n  const handleSubmit = (e) => {\\n    e.preventDefault();\\n    if (!description || !amount || !date) {\\n      alert(\'Please fill in all fields.\');\\n      return;\\n    }\\n\\n    const newTransaction = {\\n      id: Date.now().toString(),\\n      description,\\n      amount: parseFloat(amount),\\n      date,\\n    };\\n\\n    onAdd(newTransaction);\\n    setDescription(\'\');\\n    setAmount(\'\');\\n    setDate(\'\');\\n  };\\n\\n  return (\\n    <div className=\\"bg-white rounded-lg shadow-md p-4\\">\\n      <h2 className=\\"text-lg font-semibold mb-2\\">âž• Add New Transaction</h2>\\n      <form onSubmit={handleSubmit} className=\\"space-y-4\\">\\n        <div>\\n          <label htmlFor=\\"description\\" className=\\"block text-sm font-medium text-gray-700\\">Description</label>\\n          <input\\n            type=\\"text\\"\\n            id=\\"description\\"\\n            className=\\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm\\"\\n            value={description}\\n            onChange={(e) => setDescription(e.target.value)}\\n            placeholder=\\"e.g., Groceries\\"\\n          />\\n        </div>\\n        <div>\\n          <label htmlFor=\\"amount\\" className=\\"block text-sm font-medium text-gray-700\\">Amount</label>\\n          <input\\n            type=\\"number\\"\\n            id=\\"amount\\"\\n            className=\\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm\\"\\n            value={amount}\\n            onChange={(e) => setAmount(e.target.value)}\\n            placeholder=\\"e.g., 50.00\\"\\n          />\\n        </div>\\n        <div>\\n          <label htmlFor=\\"date\\" className=\\"block text-sm font-medium text-gray-700\\">Date</label>\\n          <input\\n            type=\\"date\\"\\n            id=\\"date\\"\\n            className=\\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm\\"\\n            value={date}\\n            onChange={(e) => setDate(e.target.value)}\\n          />\\n        </div>\\n        <div>\\n          <button type=\\"submit\\" className=\\"inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\\">\\n            <Plus className=\\"h-5 w-5 mr-2\\" />\\n            Add Transaction\\n          </button>\\n        </div>\\n      </form>\\n    </div>\\n  );\\n};\\n\\nexport default AddTransaction;"\n    }\n  },\n  "generatedFiles": [\n    "/App.js",\n    "/components/Dashboard/Dashboard.js",\n    "/components/TransactionList/TransactionList.js",\n    "/components/AddTransaction/AddTransaction.js"\n  ]\n}\n```',
        },
      ],
    },
  ],
});

//   const result = await chatSession.sendMessage("INSERT_INPUT_HERE");
//   console.log(result.response.text());
